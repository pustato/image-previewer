// Code generated by mockery v2.10.2. DO NOT EDIT.

package mockresizer

import (
	image "image"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// ImageProcessor is an autogenerated mock type for the ImageProcessor type
type ImageProcessor struct {
	mock.Mock
}

// Crop provides a mock function with given fields: img, width, height
func (_m *ImageProcessor) Crop(img image.Image, width int, height int) image.Image {
	ret := _m.Called(img, width, height)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(image.Image, int, int) image.Image); ok {
		r0 = rf(img, width, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	return r0
}

// Decode provides a mock function with given fields: reader
func (_m *ImageProcessor) Decode(reader io.Reader) (image.Image, error) {
	ret := _m.Called(reader)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(io.Reader) image.Image); ok {
		r0 = rf(reader)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(reader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: img, writer
func (_m *ImageProcessor) Encode(img image.Image, writer io.Writer) error {
	ret := _m.Called(img, writer)

	var r0 error
	if rf, ok := ret.Get(0).(func(image.Image, io.Writer) error); ok {
		r0 = rf(img, writer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Resize provides a mock function with given fields: img, width, height
func (_m *ImageProcessor) Resize(img image.Image, width int, height int) image.Image {
	ret := _m.Called(img, width, height)

	var r0 image.Image
	if rf, ok := ret.Get(0).(func(image.Image, int, int) image.Image); ok {
		r0 = rf(img, width, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(image.Image)
		}
	}

	return r0
}
